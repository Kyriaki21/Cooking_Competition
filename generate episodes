DELIMITER //

CREATE PROCEDURE CreateEpisodeParticipants(IN episode_id INT)
BEGIN
    -- Temporary tables to hold the random selections
    CREATE TEMPORARY TABLE IF NOT EXISTS TempSelectedCuisines (
        idCuisine INT UNSIGNED
    );

    CREATE TEMPORARY TABLE IF NOT EXISTS TempSelectedCooks (
        idCook INT UNSIGNED,
        idCuisine INT UNSIGNED
    );

    CREATE TEMPORARY TABLE IF NOT EXISTS TempSelectedJudges (
        idCook INT UNSIGNED
    );

    CREATE TEMPORARY TABLE IF NOT EXISTS TempSelectedRecipes (
        idRecipe INT UNSIGNED,
        idCook INT UNSIGNED
    );

    -- Select 10 random national cuisines with restriction
    INSERT INTO TempSelectedCuisines (idCuisine)
    SELECT idCuisine
    FROM Cuisine
    WHERE idCuisine NOT IN (
        SELECT Cuisine_idCuisine 
        FROM Episode_has_Participants 
        GROUP BY Cuisine_idCuisine 
        HAVING COUNT(DISTINCT Episode_idEpisode) > 3
    )
    ORDER BY RAND()
    LIMIT 10;

    -- Select 10 representative cooks from each selected cuisine with restriction
    INSERT INTO TempSelectedCooks (idCook, idCuisine)
    SELECT c.idCook, cc.Cuisine_idCuisine
    FROM Cook c
    JOIN Cook_has_Cuisine cc ON c.idCook = cc.Cook_idCook
    JOIN TempSelectedCuisines tc ON cc.Cuisine_idCuisine = tc.idCuisine
    WHERE c.idCook NOT IN (
        SELECT Cook_idCook 
        FROM Episode_has_Participants 
        GROUP BY Cook_idCook 
        HAVING COUNT(DISTINCT Episode_idEpisode) > 3
    )
    ORDER BY RAND()
    LIMIT 100; -- Adjusted to select 10 cooks per 10 cuisines

    -- Select 3 random judge cooks with restriction
    INSERT INTO TempSelectedJudges (idCook)
    SELECT idCook
    FROM Cook
    WHERE Status = 'Judge'
    AND idCook NOT IN (
        SELECT Judge_idJudge 
        FROM Episode_has_Judges 
        GROUP BY Judge_idJudge 
        HAVING COUNT(DISTINCT Episode_idEpisode) > 3
    )
    ORDER BY RAND()
    LIMIT 3;

    -- Select 1 random recipe from each selected national cuisine with restriction and assign it to a cook
    INSERT INTO TempSelectedRecipes (idRecipe, idCook)
    SELECT r.idRecipe, tc.idCook
    FROM Recipe r
    JOIN TempSelectedCooks tc ON r.Cuisine_id = tc.Cuisine_idCuisine
    WHERE r.idRecipe NOT IN (
        SELECT Recipe_idRecipe 
        FROM Episode_has_Participants 
        GROUP BY Recipe_idRecipe 
        HAVING COUNT(DISTINCT Episode_idEpisode) > 3
    )
    ORDER BY RAND()
    LIMIT 10;

    -- Insert the selected participants into Episode_has_Participants
    INSERT INTO Episode_has_Participants (Episode_idEpisode, Cook_idCook, Recipe_idRecipe, Cuisine_idCuisine)
    SELECT episode_id, tc.idCook, tr.idRecipe, tc.Cuisine_idCuisine
    FROM TempSelectedCooks tc
    JOIN TempSelectedRecipes tr ON tc.idCook = tr.idCook;

    -- Insert the selected judges into Episode_has_Judges
    INSERT INTO Episode_has_Judges (Episode_idEpisode, Judge_idJudge)
    SELECT episode_id, tj.idCook
    FROM TempSelectedJudges tj;

    -- Cleanup
    DROP TEMPORARY TABLE IF EXISTS TempSelectedCuisines;
    DROP TEMPORARY TABLE IF EXISTS TempSelectedCooks;
    DROP TEMPORARY TABLE IF EXISTS TempSelectedJudges;
    DROP TEMPORARY TABLE IF EXISTS TempSelectedRecipes;
END //

DELIMITER ;

DELIMITER //

CREATE PROCEDURE GenerateSeason(IN season_number INT, IN num_episodes INT)
BEGIN
    DECLARE episode_counter INT DEFAULT 1;
    DECLARE episode_id INT;

    -- Loop to create the specified number of episodes
    WHILE episode_counter <= num_episodes DO
        -- Create a new episode
        INSERT INTO Episode (Episode_number, Season_number)
        VALUES (episode_counter, season_number);
        SET episode_id = LAST_INSERT_ID();

        -- Generate participants and judges for the episode
        CALL CreateEpisodeParticipants(episode_id);

        -- Increment the episode counter
        SET episode_counter = episode_counter + 1;
    END WHILE;
END //

DELIMITER ;
